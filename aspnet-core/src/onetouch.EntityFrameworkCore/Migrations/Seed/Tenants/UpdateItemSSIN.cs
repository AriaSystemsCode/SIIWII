using Microsoft.EntityFrameworkCore;
using onetouch.EntityFrameworkCore;
using onetouch.SycCounters;
using System;
using System.Collections.Generic;
using System.Linq;


namespace onetouch.Migrations.Seed.Tenants
{
    public class UpdateItemSSIN
    {
        private readonly onetouchDbContext _context;

        public UpdateItemSSIN(onetouchDbContext context)
        {
            _context = context;
        }
        public void UpdateSSIN()
        {
            return;
            var appItems = _context.AppItems.IgnoreQueryFilters().Where(r => r.TenantId != null && r.ItemType == 0 && (r.SSIN == null || r.SSIN == "") && !r.IsDeleted).ToList();
            if (appItems != null && appItems.Count > 0)
            {
                for (int a = 0; a < appItems.Count; a++)
                //   foreach (var item in appItems)
                {
                    var item = appItems[a];
                    //XX
                    // using (UnitOfWorkManager.Current.DisableFilter(AbpDataFilters.MustHaveTenant, AbpDataFilters.MayHaveTenant))
                    {

                        //var itemEntityObjectType = _context.SycEntityObjectTypes.FirstOrDefault(a => a.Code == "ITEM");
                        string returnString = "";
                        var objectRec = _context.SydObjects.FirstOrDefault(x => x.Code == "ITEM");
                        if (objectRec != null)
                        {
                            var ssinId = objectRec.SSINIdentifierId;
                            if (ssinId != null)
                            {
                                var sycSegmentIdentifierDefinitions = _context.SycSegmentIdentifierDefinitions.IgnoreQueryFilters().Where(e => e.SycIdentifierDefinitionId == ssinId).OrderBy(x => x.SegmentNumber).ToList();
                                if (sycSegmentIdentifierDefinitions != null && sycSegmentIdentifierDefinitions.Count > 0)
                                {
                                    foreach (var segment in sycSegmentIdentifierDefinitions)
                                    {
                                        if (segment.IsAutoGenerated && segment.SegmentType == "Sequence")
                                        {
                                            var sycCounter = _context.SycCounters.IgnoreQueryFilters().Where(e => e.SycSegmentIdentifierDefinitionId == segment.Id && e.TenantId == item.TenantId).FirstOrDefault();
                                            if (sycCounter == null)
                                            {
                                                sycCounter = new SycCounter();
                                                sycCounter.SycSegmentIdentifierDefinitionId = segment.Id;
                                                sycCounter.Counter = segment.CodeStartingValue + 1;
                                                if (item.TenantId != null)
                                                {
                                                    sycCounter.TenantId = (int?)item.TenantId;
                                                }
                                                _context.SycCounters.Add(sycCounter);
                                                _context.SaveChanges();
                                                returnString = string.IsNullOrEmpty(returnString) ? returnString : returnString + "-";
                                                if (segment.SegmentLength > 0)
                                                { returnString += segment.CodeStartingValue.ToString().Trim().PadLeft(segment.SegmentLength, '0'); }
                                            }
                                            else
                                            {
                                                returnString = string.IsNullOrEmpty(returnString) ? returnString : returnString + "-";
                                                if (segment.SegmentLength > 0)
                                                { returnString += sycCounter.Counter.ToString().Trim().PadLeft(segment.SegmentLength, '0'); }

                                                sycCounter.Counter += 1;
                                                _context.SycCounters.Update (sycCounter);
                                                _context.SaveChanges();

                                            }
                                        }
                                        else
                                        {
                                            if (segment.SegmentType == "Field")
                                            {
                                                if (segment.LookOrFieldName.ToUpper() == "TENANTID")
                                                {
                                                    returnString = string.IsNullOrEmpty(returnString) ? returnString : returnString + "-";

                                                    string _segmentValue = item.TenantId.ToString();
                                                    if (segment.SegmentLength > 0)
                                                    { _segmentValue = _segmentValue.PadLeft(segment.SegmentLength, '0'); }
                                                    returnString += _segmentValue;

                                                }
                                                //else
                                                //{
                                                //    if (appEntity != null)
                                                //    {
                                                //        var prop = appEntity.GetType().GetProperty(segment.LookOrFieldName);
                                                //        if (prop != null)
                                                //        {
                                                //            returnString = string.IsNullOrEmpty(returnString) ? returnString : returnString + "-";
                                                //            string _segmentFieldValue = prop.GetValue(appEntity).ToString();
                                                //            if (segment.SegmentLength > 0)
                                                //            { _segmentFieldValue = _segmentFieldValue.PadLeft(segment.SegmentLength, '0'); }
                                                //            returnString += _segmentFieldValue;

                                                //        }
                                                //    }
                                                //}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        item.SSIN = returnString;
                        item.TenantOwner = int.Parse(item.TenantId.ToString());
                        item.TimeStamp = item.LastModificationTime == null ? DateTime.Parse(item.CreationTime.ToString()) : DateTime.Parse(item.LastModificationTime.ToString());
                        _context.AppItems.Update(item);
                          _context.SaveChanges();
                        // return returnString;
                        //XX                    
                    }
                    //adminRole = _context.Roles.Add(new Role(_tenantId, StaticRoleNames.Tenants.Admin, StaticRoleNames.Tenants.Admin) { IsStatic = true }).Entity;\
                }
                _context.SaveChanges();
            }
        }
    }
}
