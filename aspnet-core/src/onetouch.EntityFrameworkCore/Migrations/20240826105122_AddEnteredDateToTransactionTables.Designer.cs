// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using onetouch.EntityFrameworkCore;

#nullable disable

namespace onetouch.Migrations
{
    [DbContext(typeof(onetouchDbContext))]
    [Migration("20240826105122_AddEnteredDateToTransactionTables")]
    partial class AddEnteredDateToTransactionTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AbpEditions", t =>
                        {
                            t.HasTrigger("AbpEditions_Trigger");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures", t =>
                        {
                            t.HasTrigger("AbpFeatures_Trigger");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs", t =>
                        {
                            t.HasTrigger("AbpAuditLogs_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions", t =>
                        {
                            t.HasTrigger("AbpPermissions_Trigger");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims", t =>
                        {
                            t.HasTrigger("AbpRoleClaims_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.AbpUserBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AbpUsers", t =>
                        {
                            t.HasTrigger("AbpUsers_Trigger");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbpUserBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts", t =>
                        {
                            t.HasTrigger("AbpUserAccounts_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims", t =>
                        {
                            t.HasTrigger("AbpUserClaims_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProviderKey", "TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins", t =>
                        {
                            t.HasTrigger("AbpUserLogins_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts", t =>
                        {
                            t.HasTrigger("AbpUserLoginAttempts_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits", t =>
                        {
                            t.HasTrigger("AbpUserOrganizationUnits_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles", t =>
                        {
                            t.HasTrigger("AbpUserRoles_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens", t =>
                        {
                            t.HasTrigger("AbpUserTokens_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs", t =>
                        {
                            t.HasTrigger("AbpBackgroundJobs_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings", t =>
                        {
                            t.HasTrigger("AbpSettings_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.HasIndex("EntityFullName", "DynamicPropertyId", "TenantId")
                        .IsUnique()
                        .HasFilter("[EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicEntityProperties", t =>
                        {
                            t.HasTrigger("AbpDynamicEntityProperties_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicEntityPropertyId");

                    b.ToTable("AbpDynamicEntityPropertyValues", t =>
                        {
                            t.HasTrigger("AbpDynamicEntityPropertyValues_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName", "TenantId")
                        .IsUnique()
                        .HasFilter("[PropertyName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicProperties", t =>
                        {
                            t.HasTrigger("AbpDynamicProperties_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.ToTable("AbpDynamicPropertyValues", t =>
                        {
                            t.HasTrigger("AbpDynamicPropertyValues_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges", t =>
                        {
                            t.HasTrigger("AbpEntityChanges_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets", t =>
                        {
                            t.HasTrigger("AbpEntityChangeSets_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NewValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OriginalValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges", t =>
                        {
                            t.HasTrigger("AbpEntityPropertyChanges_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("AbpPersistedGrants", null, t =>
                        {
                            t.HasTrigger("AbpPersistedGrants_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages", t =>
                        {
                            t.HasTrigger("AbpLanguages_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts", t =>
                        {
                            t.HasTrigger("AbpLanguageTexts_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications", t =>
                        {
                            t.HasTrigger("AbpNotifications_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions", t =>
                        {
                            t.HasTrigger("AbpNotificationSubscriptions_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications", t =>
                        {
                            t.HasTrigger("AbpTenantNotifications_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications", t =>
                        {
                            t.HasTrigger("AbpUserNotifications_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits", t =>
                        {
                            t.HasTrigger("AbpOrganizationUnits_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles", t =>
                        {
                            t.HasTrigger("AbpOrganizationUnitRoles_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents", t =>
                        {
                            t.HasTrigger("AbpWebhookEvents_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts", t =>
                        {
                            t.HasTrigger("AbpWebhookSendAttempts_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions", t =>
                        {
                            t.HasTrigger("AbpWebhookSubscriptions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppAdvertisements.AppAdvertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ApprovalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfOccurences")
                        .HasColumnType("int");

                    b.Property<int>("OccurenceUnitOfTime")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PeriodOfView")
                        .HasColumnType("int");

                    b.Property<bool>("PublishOnHomePage")
                        .HasColumnType("bit");

                    b.Property<bool>("PublishOnMarketLandingPage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("UTCFromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UTCToDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("AppAdvertisements", t =>
                        {
                            t.HasTrigger("AppAdvertisements_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppContacts.AppAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AppAddresses", t =>
                        {
                            t.HasTrigger("AppAddresses_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AccountTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileData")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartnerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone1CountryKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone1Ext")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone1Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("Phone1TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone1TypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone2CountryKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone2Ext")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone2Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("Phone2TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone2TypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone3CountryKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone3Ext")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone3Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("Phone3TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone3TypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("Phone1TypeId");

                    b.HasIndex("Phone2TypeId");

                    b.HasIndex("Phone3TypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppContacts", t =>
                        {
                            t.HasTrigger("AppContacts_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContactAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AddressTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("ContactId");

                    b.ToTable("AppContactAddresses", t =>
                        {
                            t.HasTrigger("AppContactAddresses_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContactPaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CardExpirationMonth")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CardExpirationYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardPaymentToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardProfileToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CardType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ContactCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("AppContactPaymentMethods", t =>
                        {
                            t.HasTrigger("AppContactPaymentMethods_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntitiesRelationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityTable")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EntityTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RelatedContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelatedEntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RelatedEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelatedEntityTable")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RelatedEntityTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EntityId");

                    b.HasIndex("RelatedContactId");

                    b.HasIndex("RelatedEntityId");

                    b.ToTable("AppEntitiesRelationships", t =>
                        {
                            t.HasTrigger("AppEntitiesRelationships_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityObjectStatusCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("EntityObjectStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("SSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TenantOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityObjectStatusId");

                    b.HasIndex("EntityObjectTypeId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AppEntities", t =>
                        {
                            t.HasTrigger("AppEntities_Trigger");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AddressTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("EntityId");

                    b.ToTable("AppEntityAddresses", t =>
                        {
                            t.HasTrigger("AppEntityAddresses_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AttachmentCategoryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AttachmentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachmentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentCategoryId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("EntityId");

                    b.ToTable("AppEntityAttachments", t =>
                        {
                            t.HasTrigger("AppEntityAttachments_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectCategoryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityObjectCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityObjectCategoryId");

                    b.ToTable("AppEntityCategories", t =>
                        {
                            t.HasTrigger("AppEntityCategories_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectClassificationCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityObjectClassificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityObjectClassificationId");

                    b.ToTable("AppEntityClassifications", t =>
                        {
                            t.HasTrigger("AppEntityClassifications_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityExtraData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<string>("AttributeValue")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("AttributeValueId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("EntityObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityObjectTypeId");

                    b.ToTable("AppEntityExtraData", t =>
                        {
                            t.HasTrigger("AppEntityExtraData_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityReactionsCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CelebrateCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CuriousCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntityCommentsCount")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("InsightfulCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("LoverCount")
                        .HasColumnType("int");

                    b.Property<long>("ReactionsCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ViewersCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("AppEntityInteractions", t =>
                        {
                            t.HasTrigger("AppEntityInteractions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntitySharings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedTenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedUserEMail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SharedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("SharedUserId");

                    b.ToTable("AppEntitySharings", t =>
                        {
                            t.HasTrigger("AppEntitySharings_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("JsonString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("AppEntityStates", t =>
                        {
                            t.HasTrigger("AppEntityStates_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityUserReactions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReactionSelected")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionTime");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("AppEntityUserReactions", t =>
                        {
                            t.HasTrigger("AppEntityUserReactions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEventGuests.AppEventGuest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UserResponce")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EventId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppEventGuests", t =>
                        {
                            t.HasTrigger("AppEventGuests_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppEvents.AppEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GuestCanInviteFriends")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnLine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Privacy")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UTCFromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UTCToDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppEvents", t =>
                        {
                            t.HasTrigger("AppEvents_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItemSelectors.AppItemSelector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SelectedId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppItemSelectors", t =>
                        {
                            t.HasTrigger("AppItemSelectors_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("ItemType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ListingItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("ParentEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<long?>("PublishedListingItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("SSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("SharingLevel")
                        .HasColumnType("tinyint");

                    b.Property<long>("StockAvailability")
                        .HasColumnType("bigint");

                    b.Property<long?>("SycIdentifierId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TenantOwner")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Variations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ItemType");

                    b.HasIndex("ListingItemId");

                    b.HasIndex("ParentEntityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PublishedListingItemId");

                    b.HasIndex("SharingLevel");

                    b.HasIndex("SycIdentifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppItems", t =>
                        {
                            t.HasTrigger("AppItems_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemPrices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("AppItemId", "Code", "CurrencyCode");

                    b.ToTable("AppItemPrices", t =>
                        {
                            t.HasTrigger("AppItemPrices_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSharing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemListId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedTenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedUserEMail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("SharedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemListId");

                    b.HasIndex("SharedUserId");

                    b.ToTable("AppItemSharing", t =>
                        {
                            t.HasTrigger("AppItemSharing_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSizeScalesDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("D1Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D2Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D3Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DimensionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SizeRatio")
                        .HasColumnType("int");

                    b.Property<long>("SizeScaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("SizeScaleId");

                    b.ToTable("AppItemSizeScalesDetails", t =>
                        {
                            t.HasTrigger("AppItemSizeScalesDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSizeScalesHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimesion1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion3Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfDimensions")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeScaleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeScaleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeScaleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppItemId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SizeScaleId");

                    b.ToTable("AppItemSizeScalesHeader", t =>
                        {
                            t.HasTrigger("AppItemSizeScalesHeader_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppSizeScalesDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("D1Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D2Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D3Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DimensionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SizeRatio")
                        .HasColumnType("int");

                    b.Property<long>("SizeScaleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("SizeScaleId");

                    b.ToTable("AppSizeScalesDetail", t =>
                        {
                            t.HasTrigger("AppSizeScalesDetail_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItems.AppSizeScalesHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppSizeScalesHeaderFkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimesion1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion3Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfDimensions")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppSizeScalesHeaderFkId");

                    b.HasIndex("EntityId");

                    b.ToTable("AppSizeScalesHeader", t =>
                        {
                            t.HasTrigger("AppSizeScalesHeader_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItemsLists.AppItemsList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("SharingLevel")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppItemsLists", t =>
                        {
                            t.HasTrigger("AppItemsLists_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppItemsLists.AppItemsListDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemSSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ItemsListCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ItemsListId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemsListId");

                    b.ToTable("AppItemsListDetails", t =>
                        {
                            t.HasTrigger("AppItemsListDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceAccountsPriceLevels.AppMarketplaceAccountsPriceLevels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountSSIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectedAccountSSIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppMarketplaceAccountsPriceLevels", t =>
                        {
                            t.HasTrigger("AppMarketplaceAccountsPriceLevels_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItemLists.AppMarketplaceItemsListDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppMarketplaceItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("AppMarketplaceItemSSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("AppMarketplaceItemsListId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemsListCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppMarketplaceItemId");

                    b.HasIndex("AppMarketplaceItemsListId");

                    b.ToTable("AppMarketplaceItemsListDetails", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemsListDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemPrices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppMarketplaceItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppMarketplaceItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppMarketplaceItemId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AppMarketplaceItemPrices", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemPrices_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSelectors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SelectedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AppMarketplaceItemSelectors", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemSelectors_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSharings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppMarketplaceItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppMarketplaceItemListId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SharedTenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedUserEMail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("SharedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppMarketplaceItemId");

                    b.HasIndex("AppMarketplaceItemListId");

                    b.HasIndex("SharedUserId");

                    b.ToTable("AppMarketplaceItemSharings", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemSharings_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("D1Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D2Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("D3Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DimensionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SizeRatio")
                        .HasColumnType("int");

                    b.Property<long>("SizeScaleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.HasIndex("SizeScaleId");

                    b.ToTable("AppMarketplaceItemSizeScaleDetails", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemSizeScaleDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleHeaders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppMarketplaceItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppMarketplaceItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimesion1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimesion3Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfDimensions")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeScaleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeScaleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeScaleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppMarketplaceItemId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SizeScaleId");

                    b.ToTable("AppMarketplaceItemSizeScaleHeaders", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemSizeScaleHeaders_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceMessages.AppMarketplaceMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalMessageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("ThreadId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ThreadId");

                    b.ToTable("AppMarketplaceMessages", t =>
                        {
                            t.HasTrigger("AppMarketplaceMessages_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionContacts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressLine1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactAddressPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactAddressState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("ContactPhoneTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPhoneTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactPhoneTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AppMarketplaceTransactionContacts", t =>
                        {
                            t.HasTrigger("AppMarketplaceTransactionContacts_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppPosts.AppPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1300)
                        .HasColumnType("nvarchar(1300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppContactId");

                    b.HasIndex("AppEntityId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppPosts", t =>
                        {
                            t.HasTrigger("AppPosts_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppActiveTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AppActiveTransaction", t =>
                        {
                            t.HasTrigger("AppActiveTransaction_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionContacts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactAddressCountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ContactAddressCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddressLine1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddressName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactAddressPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactAddressState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("ContactPhoneTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPhoneTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactAddressCountryId");

                    b.HasIndex("ContactAddressId");

                    b.HasIndex("ContactPhoneTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AppTransactionContacts", t =>
                        {
                            t.HasTrigger("AppTransactionContacts_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.oldAppTenantsActivitiesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("Billed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AppTenantsActivitiesLogs", t =>
                        {
                            t.HasTrigger("AppTenantsActivitiesLogs_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppTenantPlans.AppTenantPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("TenantId");

                    b.ToTable("AppTenantPlans", t =>
                        {
                            t.HasTrigger("AppTenantPlans_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppTransactions.AppTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppTransactions", t =>
                        {
                            t.HasTrigger("AppTransactions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Attachments.AppAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppAttachments", t =>
                        {
                            t.HasTrigger("AppAttachments_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Authorization.Delegation.UserDelegation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SourceUserId");

                    b.HasIndex("TenantId", "TargetUserId");

                    b.ToTable("AppUserDelegations", t =>
                        {
                            t.HasTrigger("AppUserDelegations_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles", t =>
                        {
                            t.HasTrigger("AbpRoles_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AutoTaskAttachmentInfo.AttachmentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AttachDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AttachedByContactID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachedByResourceID")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CreatorType")
                        .HasColumnType("int");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FullPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImpersonatorCreatorResourceID")
                        .HasColumnType("int");

                    b.Property<long?>("OpportunityID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<int?>("ParentType")
                        .HasColumnType("int");

                    b.Property<int?>("Publish")
                        .HasColumnType("int");

                    b.Property<long?>("RefID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketNoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketNoteId");

                    b.ToTable("AttachmentInfo", t =>
                        {
                            t.HasTrigger("AttachmentInfo_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AutoTaskTicketNotes.TicketNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByContactID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorResourceID")
                        .HasColumnType("int");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorCreatorResourceID")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatorUpdaterResourceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("NoteType")
                        .HasColumnType("int");

                    b.Property<int?>("Publish")
                        .HasColumnType("int");

                    b.Property<long?>("RefTicketID")
                        .HasColumnType("bigint");

                    b.Property<long?>("RefTicketNoteID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketNotes", t =>
                        {
                            t.HasTrigger("TicketNotes_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AutoTaskTickets.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AEMAlertID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("AccountPhysicalLocationID")
                        .HasColumnType("int");

                    b.Property<int?>("AllocationCodeID")
                        .HasColumnType("int");

                    b.Property<int?>("ApiVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedResourceID")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedResourceRoleID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessDivisionSubdivisionID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeApprovalBoard")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeApprovalType")
                        .HasColumnType("int");

                    b.Property<string>("ChangeInfoField1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeInfoField2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeInfoField3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeInfoField4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeInfoField5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompletedByResourceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("ContractID")
                        .HasColumnType("int");

                    b.Property<long?>("ContractServiceBundleID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractServiceID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByContactID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorResourceID")
                        .HasColumnType("int");

                    b.Property<int?>("CreatorType")
                        .HasColumnType("int");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrentServiceThermometerRating")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedHours")
                        .HasColumnType("float");

                    b.Property<string>("ExternalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstResponseAssignedResourceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstResponseDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstResponseDueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstResponseInitiatingResourceID")
                        .HasColumnType("int");

                    b.Property<decimal?>("HoursToBeScheduled")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ImpersonatorCreatorResourceID")
                        .HasColumnType("int");

                    b.Property<int?>("InstalledProductID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("IssueType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastActivityPersonType")
                        .HasColumnType("int");

                    b.Property<int?>("LastActivityResourceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastCustomerNotificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCustomerVisibleActivityDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastTrackedModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MonitorID")
                        .HasColumnType("int");

                    b.Property<int?>("MonitorTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousServiceThermometerRating")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("QueueID")
                        .HasColumnType("bigint");

                    b.Property<int?>("RMAStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RMAType")
                        .HasColumnType("int");

                    b.Property<string>("RMMAlertID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RefTicketID")
                        .HasColumnType("bigint");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolutionPlanDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolutionPlanDueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedDueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ServiceLevelAgreementHasBeenMet")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceLevelAgreementID")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceLevelAgreementPausedNextEventHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceThermometerTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("Source")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubIssueType")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketCategory")
                        .HasColumnType("int");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasTrigger("Tickets_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AutotaskQueues.AutotaskQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RefQueueID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AutotaskQueues", t =>
                        {
                            t.HasTrigger("AutotaskQueues_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadState")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("SharedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("TargetTenantId")
                        .HasColumnType("int");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages", t =>
                        {
                            t.HasTrigger("AppChatMessages_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FriendProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendTenancyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendTenantId")
                        .HasColumnType("int");

                    b.Property<long>("FriendUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships", t =>
                        {
                            t.HasTrigger("AppFriendships_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Maintainances.Maintainance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DismissIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Maintainances", t =>
                        {
                            t.HasTrigger("Maintainances_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Message.AppMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BCC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalMessageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ThreadId")
                        .HasColumnType("bigint");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("AppMessages", t =>
                        {
                            t.HasTrigger("AppMessages_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantTaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices", t =>
                        {
                            t.HasTrigger("AppInvoices_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("EditionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ErrorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments", t =>
                        {
                            t.HasTrigger("AppSubscriptionPayments_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Payments.SubscriptionPaymentExtensionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SubscriptionPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPaymentId", "Key", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("AppSubscriptionPaymentsExtensionData", t =>
                        {
                            t.HasTrigger("AppSubscriptionPaymentsExtensionData_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CustomCssId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("SubscriptionEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants", t =>
                        {
                            t.HasTrigger("AbpTenants_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects", t =>
                        {
                            t.HasTrigger("AppBinaryObjects_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycApplications.SycApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SycApplications", t =>
                        {
                            t.HasTrigger("SycApplications_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycCounters.SycCounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Counter")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SycSegmentIdentifierDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SycSegmentIdentifierDefinitionId");

                    b.HasIndex("TenantId");

                    b.ToTable("SycCounters", t =>
                        {
                            t.HasTrigger("SycCounters_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycCurrencyExchangeRates.SycCurrencyExchangeRates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BaseCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyUnit")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SycCurrencyExchangeRates", t =>
                        {
                            t.HasTrigger("SycCurrencyExchangeRates_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTenantLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int>("MaxSegmentLength")
                        .HasColumnType("int");

                    b.Property<int>("MinSegmentLength")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSegments")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SycIdentifierDefinitions", t =>
                        {
                            t.HasTrigger("SycIdentifierDefinitions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycPlanServices.SycPlanService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BillingFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MinimumUnits")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SycPlanServices", t =>
                        {
                            t.HasTrigger("SycPlanServices_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycPlans.SycPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SycPlans", t =>
                        {
                            t.HasTrigger("SycPlans_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycSegmentIdentifierDefinitions.SycSegmentIdentifierDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CodeStartingValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LookOrFieldName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SegmentHeader")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SegmentLength")
                        .HasColumnType("int");

                    b.Property<string>("SegmentMask")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SegmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("SegmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SycIdentifierDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SycIdentifierDefinitionId");

                    b.HasIndex("TenantId");

                    b.ToTable("SycSegmentIdentifierDefinitions", t =>
                        {
                            t.HasTrigger("SycSegmentIdentifierDefinitions_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SycServices.SycService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SycServices", t =>
                        {
                            t.HasTrigger("SycServices_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SuiIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SuiIcons", t =>
                        {
                            t.HasTrigger("SuiIcons_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycAttachmentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AspectRatio")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityObjectTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("EntityObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityObjectTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("SycAttachmentCategories", t =>
                        {
                            t.HasTrigger("SycAttachmentCategories_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycAttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SycAttachmentTypes", t =>
                        {
                            t.HasTrigger("SycAttachmentTypes_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeId");

                    b.ToTable("SycEntityLocalization", t =>
                        {
                            t.HasTrigger("SycEntityLocalization_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("SycEntityObjectCategories", t =>
                        {
                            t.HasTrigger("SycEntityObjectCategories_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("SycEntityObjectClassifications", t =>
                        {
                            t.HasTrigger("SycEntityObjectClassifications_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SycEntityObjectStatuses", t =>
                        {
                            t.HasTrigger("SycEntityObjectStatuses_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SycIdentifierDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SycIdentifierDefinitionId");

                    b.ToTable("SycEntityObjectTypes", t =>
                        {
                            t.HasTrigger("SycEntityObjectTypes_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityObjectTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EntityObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityObjectTypeId");

                    b.ToTable("SycReports", t =>
                        {
                            t.HasTrigger("SycReports_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SydObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObjectTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SSINIdentifierCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SSINIdentifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("SycDefaultIdentifierCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SycDefaultIdentifierId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SSINIdentifierId");

                    b.HasIndex("SycDefaultIdentifierId");

                    b.ToTable("SydObjects", t =>
                        {
                            t.HasTrigger("SydObjects_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.SystemObjects.SysObjectType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SysObjectTypes", t =>
                        {
                            t.HasTrigger("SysObjectTypes_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.TenantInvitations.SycTenantInvitatios", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SycTenantInvitatios", t =>
                        {
                            t.HasTrigger("SycTenantInvitatios_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExpiringEditionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrialDayCount")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingDayAfterExpire")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("AbpEditions", t =>
                        {
                            t.HasTrigger("AbpEditions_Trigger");
                        });

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures", t =>
                        {
                            t.HasTrigger("AbpFeatures_Trigger");
                        });

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures", t =>
                        {
                            t.HasTrigger("AbpFeatures_Trigger");
                        });

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions", t =>
                        {
                            t.HasTrigger("AbpPermissions_Trigger");
                        });

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions", t =>
                        {
                            t.HasTrigger("AbpPermissions_Trigger");
                        });

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("onetouch.Authorization.Users.User", b =>
                {
                    b.HasBaseType("Abp.Authorization.Users.AbpUserBase");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("GoogleAuthenticatorKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("SignInToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers", t =>
                        {
                            t.HasTrigger("AbpUsers_Trigger");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("SharingLevel")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.ToTable("AppMarketplaceItemLists", t =>
                        {
                            t.HasTrigger("AppMarketplaceItemLists_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItems", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("SharingLevel")
                        .HasColumnType("tinyint");

                    b.Property<long>("StockAvailability")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Variations")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ParentId");

                    b.ToTable("AppMarketplaceItems", t =>
                        {
                            t.HasTrigger("AppMarketplaceItems_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionDetails", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(17, 3)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(8, 3)");

                    b.Property<decimal>("GrossPrice")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemSSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("LineNo")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<long?>("NoOfPrePacks")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasIndex("ParentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AppMarketplaceTransactionDetails", t =>
                        {
                            t.HasTrigger("AppMarketplaceTransactionDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BuyerCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerCompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerContactEMailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuyerContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BuyerContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerDepartment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerStore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CurrencyExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredUserByRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentTermsCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentTermsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerCompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerContactEMailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SellerContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SellerContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipViaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipViaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<long>("TotalQuantity")
                        .HasColumnType("bigint");

                    b.ToTable("AppMarketplaceTransactionHeaders", t =>
                        {
                            t.HasTrigger("AppMarketplaceTransactionHeaders_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionDetails", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(17, 3)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(8, 3)");

                    b.Property<decimal>("GrossPrice")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemSSIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("LineNo")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(15, 3)");

                    b.Property<long?>("NoOfPrePacks")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasIndex("ParentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AppTransactionDetails", t =>
                        {
                            t.HasTrigger("AppTransactionDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BuyerCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerCompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerContactEMailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuyerContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BuyerContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerDepartment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuyerStore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CurrencyExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnteredUserByRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentTermsCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("PaymentTermsId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentTermsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerCompanySSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerContactEMailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SellerContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SellerContactSSIN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipViaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ShipViaId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShipViaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<long>("TotalQuantity")
                        .HasColumnType("bigint");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PaymentTermsId");

                    b.HasIndex("ShipViaId");

                    b.ToTable("AppTransactionHeaders", t =>
                        {
                            t.HasTrigger("AppTransactionHeaders_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppFeature", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<bool>("Billable")
                        .HasColumnType("bit");

                    b.Property<string>("BillingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeaturePeriodLimit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TrackActivity")
                        .HasColumnType("bit");

                    b.Property<string>("UnitOfMeasurementCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UnitOfMeasurementId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitOfMeasurementName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("AppFeatures", t =>
                        {
                            t.HasTrigger("AppFeatures_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppSubscriptionPlanDetail", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<long>("AppSubscriptionPlanHeaderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureBillingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FeatureLimit")
                        .HasColumnType("int");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeaturePeriodLimit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FeatureStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsAddOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatureBillable")
                        .HasColumnType("bit");

                    b.Property<bool>("RollOver")
                        .HasColumnType("bit");

                    b.Property<bool>("Trackactivity")
                        .HasColumnType("bit");

                    b.Property<string>("UnitOfMeasurementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitOfMeasurmentCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("AppSubscriptionPlanHeaderId");

                    b.ToTable("AppSubscriptionPlanDetails", t =>
                        {
                            t.HasTrigger("AppSubscriptionPlanDetails_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppSubscriptionPlanHeader", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<string>("BillingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("bit");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YearlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("AppSubscriptionPlanHeaders", t =>
                        {
                            t.HasTrigger("AppSubscriptionPlanHeaders_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppTenantActivitiesLog", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<DateTime>("ActivityDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AppSubscriptionPlanCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("AppSubscriptionPlanHeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Billable")
                        .HasColumnType("bit");

                    b.Property<long>("ConsumedQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreditOrUsage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FeatureCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FeatureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Invoiced")
                        .HasColumnType("bit");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Qty")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RelatedEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelatedEntityObjectTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RelatedEntityObjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RemainingQty")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasIndex("RelatedEntityId");

                    b.HasIndex("RelatedEntityObjectTypeId");

                    b.ToTable("AppTenantActivitiesLog", t =>
                        {
                            t.HasTrigger("AppTenantActivitiesLog_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppTenantSubscriptionPlan", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<bool>("AllowOverAge")
                        .HasColumnType("bit");

                    b.Property<long>("AppSubscriptionPlanHeaderId")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CurrentPeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionPlanCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("AppSubscriptionPlanHeaderId");

                    b.ToTable("AppTenantSubscriptionPlans", t =>
                        {
                            t.HasTrigger("AppTenantSubscriptionPlans_Trigger");
                        });
                });

            modelBuilder.Entity("onetouch.AppSubscriptionPlans.AppTenantInvoice", b =>
                {
                    b.HasBaseType("onetouch.AppEntities.AppEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.ToTable("AppTenantInvoices", t =>
                        {
                            t.HasTrigger("AppTenantInvoices_Trigger");
                        });
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("onetouch.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Abp.Authorization.Users.AbpUserBase", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Abp.Authorization.Users.AbpUserBase", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("onetouch.Authorization.Users.User", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Abp.Authorization.Users.AbpUserBase", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("onetouch.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Abp.Authorization.Users.AbpUserBase", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany()
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany()
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicEntityProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany("DynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("onetouch.AppAdvertisements.AppAdvertisement", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "AppEntityFk")
                        .WithMany()
                        .HasForeignKey("AppEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppEntityFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.AppContacts.AppAddress", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryFk");
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContact", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppContact", "AccountFk")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "LanguageFk")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("onetouch.AppContacts.AppContact", "ParentFk")
                        .WithMany("ParentFkList")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppContacts.AppContact", "PartnerFk")
                        .WithMany("PartnerFkList")
                        .HasForeignKey("PartnerId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "Phone1TypeFk")
                        .WithMany()
                        .HasForeignKey("Phone1TypeId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "Phone2TypeFk")
                        .WithMany()
                        .HasForeignKey("Phone2TypeId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "Phone3TypeFk")
                        .WithMany()
                        .HasForeignKey("Phone3TypeId");

                    b.Navigation("AccountFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("EntityFk");

                    b.Navigation("LanguageFk");

                    b.Navigation("ParentFk");

                    b.Navigation("PartnerFk");

                    b.Navigation("Phone1TypeFk");

                    b.Navigation("Phone2TypeFk");

                    b.Navigation("Phone3TypeFk");
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContactAddress", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppAddress", "AddressFk")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "AddressTypeFk")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppContacts.AppContact", "ContactFk")
                        .WithMany("AppContactAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressFk");

                    b.Navigation("AddressTypeFk");

                    b.Navigation("ContactFk");
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContactPaymentMethod", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppContact", "ContactFk")
                        .WithMany("AppContactPaymentMethods")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntitiesRelationship", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppContact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntitiesRelationships")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppContacts.AppContact", "RelatedContactFk")
                        .WithMany()
                        .HasForeignKey("RelatedContactId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "RelatedEntityFk")
                        .WithMany("RelatedEntitiesRelationships")
                        .HasForeignKey("RelatedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("EntityFk");

                    b.Navigation("RelatedContactFk");

                    b.Navigation("RelatedEntityFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntity", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SycEntityObjectStatus", "EntityObjectStatusFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectStatusId");

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "EntityObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SydObject", "ObjectFk")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityObjectStatusFk");

                    b.Navigation("EntityObjectTypeFk");

                    b.Navigation("ObjectFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityAddress", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppAddress", "AddressFk")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "AddressTypeFk")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntityAddresses")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressFk");

                    b.Navigation("AddressTypeFk");

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityAttachment", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SycAttachmentCategory", "AttachmentCategoryFk")
                        .WithMany()
                        .HasForeignKey("AttachmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Attachments.AppAttachment", "AttachmentFk")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntityAttachments")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentCategoryFk");

                    b.Navigation("AttachmentFk");

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityCategory", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntityCategories")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectCategory", "EntityObjectCategoryFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");

                    b.Navigation("EntityObjectCategoryFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityClassification", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntityClassifications")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectClassification", "EntityObjectClassificationFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");

                    b.Navigation("EntityObjectClassificationFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityExtraData", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "AttributeValueFk")
                        .WithMany()
                        .HasForeignKey("AttributeValueId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany("EntityExtraData")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "EntityObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectTypeId");

                    b.Navigation("AttributeValueFk");

                    b.Navigation("EntityFk");

                    b.Navigation("EntityObjectTypeFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityReactionsCount", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithOne("AppEntityReactionsCount")
                        .HasForeignKey("onetouch.AppEntities.AppEntityReactionsCount", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntitySharings", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("SharedUserId");

                    b.Navigation("EntityFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityState", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntityUserReactions", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.AppEventGuests.AppEventGuest", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEvents.AppEvent", "EventFk")
                        .WithMany("AppEventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");

                    b.Navigation("EventFk");
                });

            modelBuilder.Entity("onetouch.AppEvents.AppEvent", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItem", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppItems.AppItem", "ListingItemFk")
                        .WithMany("ListingItemFkList")
                        .HasForeignKey("ListingItemId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "ParentEntityFk")
                        .WithMany()
                        .HasForeignKey("ParentEntityId");

                    b.HasOne("onetouch.AppItems.AppItem", "ParentFk")
                        .WithMany("ParentFkList")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppItems.AppItem", "PublishedListingItemFk")
                        .WithMany("PublishedListingItemFkList")
                        .HasForeignKey("PublishedListingItemId");

                    b.HasOne("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", "SycIdentifierIdFk")
                        .WithMany()
                        .HasForeignKey("SycIdentifierId");

                    b.Navigation("EntityFk");

                    b.Navigation("ListingItemFk");

                    b.Navigation("ParentEntityFk");

                    b.Navigation("ParentFk");

                    b.Navigation("PublishedListingItemFk");

                    b.Navigation("SycIdentifierIdFk");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemPrices", b =>
                {
                    b.HasOne("onetouch.AppItems.AppItem", "AppItemFk")
                        .WithMany("ItemPricesFkList")
                        .HasForeignKey("AppItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("AppItemFk");

                    b.Navigation("CurrencyFk");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSharing", b =>
                {
                    b.HasOne("onetouch.AppItems.AppItem", "ItemFk")
                        .WithMany("ItemSharingFkList")
                        .HasForeignKey("ItemId");

                    b.HasOne("onetouch.AppItemsLists.AppItemsList", "ItemListFk")
                        .WithMany("ItemSharingFkList")
                        .HasForeignKey("ItemListId");

                    b.HasOne("onetouch.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("SharedUserId");

                    b.Navigation("ItemFk");

                    b.Navigation("ItemListFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSizeScalesDetails", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "SizeFk")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("onetouch.AppItems.AppItemSizeScalesHeader", "SizeScaleFK")
                        .WithMany("AppItemSizeScalesDetails")
                        .HasForeignKey("SizeScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SizeFk");

                    b.Navigation("SizeScaleFK");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSizeScalesHeader", b =>
                {
                    b.HasOne("onetouch.AppItems.AppItem", "AppItemFk")
                        .WithMany("ItemSizeScaleHeadersFkList")
                        .HasForeignKey("AppItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppItems.AppItemSizeScalesHeader", "ItemSizeScaleFK")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppItems.AppSizeScalesHeader", "SizeScaleFK")
                        .WithMany()
                        .HasForeignKey("SizeScaleId");

                    b.Navigation("AppItemFk");

                    b.Navigation("ItemSizeScaleFK");

                    b.Navigation("SizeScaleFK");
                });

            modelBuilder.Entity("onetouch.AppItems.AppSizeScalesDetail", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "SizeFk")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("onetouch.AppItems.AppSizeScalesHeader", "AppSizeScalesHeaderFk")
                        .WithMany("AppSizeScalesDetails")
                        .HasForeignKey("SizeScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSizeScalesHeaderFk");

                    b.Navigation("SizeFk");
                });

            modelBuilder.Entity("onetouch.AppItems.AppSizeScalesHeader", b =>
                {
                    b.HasOne("onetouch.AppItems.AppSizeScalesHeader", "AppSizeScalesHeaderFk")
                        .WithMany()
                        .HasForeignKey("AppSizeScalesHeaderFkId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSizeScalesHeaderFk");

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppItemsLists.AppItemsList", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityFk");
                });

            modelBuilder.Entity("onetouch.AppItemsLists.AppItemsListDetail", b =>
                {
                    b.HasOne("onetouch.AppItems.AppItem", "ItemFK")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppItemsLists.AppItemsList", "ItemsListFK")
                        .WithMany("AppItemsListDetails")
                        .HasForeignKey("ItemsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemFK");

                    b.Navigation("ItemsListFK");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItemLists.AppMarketplaceItemsListDetails", b =>
                {
                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItems", "ItemFK")
                        .WithMany()
                        .HasForeignKey("AppMarketplaceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", "ItemsListFK")
                        .WithMany("AppItemsListDetails")
                        .HasForeignKey("AppMarketplaceItemsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemFK");

                    b.Navigation("ItemsListFK");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemPrices", b =>
                {
                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItems", "AppItemFk")
                        .WithMany("ItemPricesFkList")
                        .HasForeignKey("AppMarketplaceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("AppItemFk");

                    b.Navigation("CurrencyFk");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSharings", b =>
                {
                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItems", "AppMarketplaceItemIdFk")
                        .WithMany("ItemSharingFkList")
                        .HasForeignKey("AppMarketplaceItemId");

                    b.HasOne("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", "ItemListFk")
                        .WithMany("ItemSharingFkList")
                        .HasForeignKey("AppMarketplaceItemListId");

                    b.HasOne("onetouch.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("SharedUserId");

                    b.Navigation("AppMarketplaceItemIdFk");

                    b.Navigation("ItemListFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleDetails", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "SizeFk")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleHeaders", "SizeScaleFK")
                        .WithMany("AppItemSizeScalesDetails")
                        .HasForeignKey("SizeScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SizeFk");

                    b.Navigation("SizeScaleFK");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleHeaders", b =>
                {
                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItems", "AppItemFk")
                        .WithMany("ItemSizeScaleHeadersFkList")
                        .HasForeignKey("AppMarketplaceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleHeaders", "ItemSizeScaleFK")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppItems.AppSizeScalesHeader", "SizeScaleFK")
                        .WithMany()
                        .HasForeignKey("SizeScaleId");

                    b.Navigation("AppItemFk");

                    b.Navigation("ItemSizeScaleFK");

                    b.Navigation("SizeScaleFK");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceMessages.AppMarketplaceMessage", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceMessages.AppMarketplaceMessage", null)
                        .WithMany("ParentFKList")
                        .HasForeignKey("ParentId");

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "SenderFk")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceMessages.AppMarketplaceMessage", "ThreadFk")
                        .WithMany()
                        .HasForeignKey("ThreadId");

                    b.Navigation("EntityFk");

                    b.Navigation("SenderFk");

                    b.Navigation("ThreadFk");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionContacts", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "ContactPhoneTypeFk")
                        .WithMany()
                        .HasForeignKey("ContactPhoneTypeId");

                    b.HasOne("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", "TransactionIdFK")
                        .WithMany("AppMarketplaceTransactionContacts")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactPhoneTypeFk");

                    b.Navigation("TransactionIdFK");
                });

            modelBuilder.Entity("onetouch.AppPosts.AppPost", b =>
                {
                    b.HasOne("onetouch.AppContacts.AppContact", "AppContactFk")
                        .WithMany()
                        .HasForeignKey("AppContactId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "AppEntityFk")
                        .WithMany()
                        .HasForeignKey("AppEntityId");

                    b.Navigation("AppContactFk");

                    b.Navigation("AppEntityFk");
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionContacts", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "ContactAddressCountryFk")
                        .WithMany()
                        .HasForeignKey("ContactAddressCountryId");

                    b.HasOne("onetouch.AppContacts.AppAddress", "ContactAddressFk")
                        .WithMany()
                        .HasForeignKey("ContactAddressId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "ContactPhoneTypeFk")
                        .WithMany()
                        .HasForeignKey("ContactPhoneTypeId");

                    b.HasOne("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", "TransactionIdFK")
                        .WithMany("AppTransactionContacts")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactAddressCountryFk");

                    b.Navigation("ContactAddressFk");

                    b.Navigation("ContactPhoneTypeFk");

                    b.Navigation("TransactionIdFK");
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.oldAppTenantsActivitiesLog", b =>
                {
                    b.HasOne("onetouch.SycApplications.SycApplication", "ApplicationFk")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("onetouch.SycPlans.SycPlan", "PlanFk")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("onetouch.SycServices.SycService", "ServiceFk")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("onetouch.MultiTenancy.Tenant", "TenantFk")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("onetouch.AppTransactions.AppTransaction", "TransactionFk")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("ApplicationFk");

                    b.Navigation("PlanFk");

                    b.Navigation("ServiceFk");

                    b.Navigation("TenantFk");

                    b.Navigation("TransactionFk");
                });

            modelBuilder.Entity("onetouch.AppTenantPlans.AppTenantPlan", b =>
                {
                    b.HasOne("onetouch.SycPlans.SycPlan", "PlanFk")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.Navigation("PlanFk");
                });

            modelBuilder.Entity("onetouch.Authorization.Roles.Role", b =>
                {
                    b.HasOne("onetouch.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("onetouch.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("onetouch.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("onetouch.AutoTaskAttachmentInfo.AttachmentInfo", b =>
                {
                    b.HasOne("onetouch.AutoTaskTickets.Ticket", "TicketFk")
                        .WithMany("EntityAttachments")
                        .HasForeignKey("TicketId");

                    b.HasOne("onetouch.AutoTaskTicketNotes.TicketNote", "TicketNoteFk")
                        .WithMany("EntityAttachments")
                        .HasForeignKey("TicketNoteId");

                    b.Navigation("TicketFk");

                    b.Navigation("TicketNoteFk");
                });

            modelBuilder.Entity("onetouch.AutoTaskTicketNotes.TicketNote", b =>
                {
                    b.HasOne("onetouch.AutoTaskTickets.Ticket", "TicketFk")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("TicketFk");
                });

            modelBuilder.Entity("onetouch.Message.AppMessage", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "EntityFk")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Message.AppMessage", null)
                        .WithMany("ParentFKList")
                        .HasForeignKey("ParentId");

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "SenderFk")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.Message.AppMessage", "ThreadFk")
                        .WithMany()
                        .HasForeignKey("ThreadId");

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EntityFk");

                    b.Navigation("SenderFk");

                    b.Navigation("ThreadFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("onetouch.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("onetouch.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("onetouch.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("onetouch.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("Edition");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("onetouch.SycCounters.SycCounter", b =>
                {
                    b.HasOne("onetouch.SycSegmentIdentifierDefinitions.SycSegmentIdentifierDefinition", "SycSegmentIdentifierDefinitionFk")
                        .WithMany()
                        .HasForeignKey("SycSegmentIdentifierDefinitionId");

                    b.Navigation("SycSegmentIdentifierDefinitionFk");
                });

            modelBuilder.Entity("onetouch.SycPlanServices.SycPlanService", b =>
                {
                    b.HasOne("onetouch.SycApplications.SycApplication", "ApplicationFk")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("onetouch.SycPlans.SycPlan", "PlanFk")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("onetouch.SycServices.SycService", "ServiceFk")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("ApplicationFk");

                    b.Navigation("PlanFk");

                    b.Navigation("ServiceFk");
                });

            modelBuilder.Entity("onetouch.SycPlans.SycPlan", b =>
                {
                    b.HasOne("onetouch.SycApplications.SycApplication", "ApplicationFk")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("ApplicationFk");
                });

            modelBuilder.Entity("onetouch.SycSegmentIdentifierDefinitions.SycSegmentIdentifierDefinition", b =>
                {
                    b.HasOne("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", "SycIdentifierDefinitionFk")
                        .WithMany()
                        .HasForeignKey("SycIdentifierDefinitionId");

                    b.Navigation("SycIdentifierDefinitionFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycAttachmentCategory", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "EntityObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectTypeId");

                    b.HasOne("onetouch.SystemObjects.SycAttachmentCategory", "ParentFk")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("EntityObjectTypeFk");

                    b.Navigation("ParentFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityLocalization", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SydObject", "SyObjectId")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SyObjectId");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectCategory", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SydObject", "ObjectFk")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectCategory", "ParentFk")
                        .WithMany("SycEntityObjectCategories")
                        .HasForeignKey("ParentId");

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ObjectFk");

                    b.Navigation("ParentFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectClassification", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SydObject", "ObjectFk")
                        .WithMany()
                        .HasForeignKey("ObjectId");

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectClassification", "ParentFk")
                        .WithMany("SycEntityObjectClassifications")
                        .HasForeignKey("ParentId");

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ObjectFk");

                    b.Navigation("ParentFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectStatus", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SydObject", "ObjectFk")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.Authorization.Users.AbpUserBase", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ObjectFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectType", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SydObject", "ObjectFk")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "ParentFk")
                        .WithMany("SycEntityObjectTypes")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", "SycIdentifierDefinitionFK")
                        .WithMany()
                        .HasForeignKey("SycIdentifierDefinitionId");

                    b.Navigation("ObjectFk");

                    b.Navigation("ParentFk");

                    b.Navigation("SycIdentifierDefinitionFK");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycReport", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "EntityObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("EntityObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityObjectTypeFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SydObject", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SysObjectType", "ObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.SystemObjects.SydObject", "ParentFk")
                        .WithMany("SydObjects")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", "SSINIdentifierIdFk")
                        .WithMany()
                        .HasForeignKey("SSINIdentifierId");

                    b.HasOne("onetouch.SycIdentifierDefinitions.SycIdentifierDefinition", "SycDefaultIdentifierIdFk")
                        .WithMany()
                        .HasForeignKey("SycDefaultIdentifierId");

                    b.Navigation("ObjectTypeFk");

                    b.Navigation("ParentFk");

                    b.Navigation("SSINIdentifierIdFk");

                    b.Navigation("SycDefaultIdentifierIdFk");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SysObjectType", b =>
                {
                    b.HasOne("onetouch.SystemObjects.SysObjectType", "ParentFk")
                        .WithMany("SysObjectTypes")
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentFk");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("onetouch.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Abp.Authorization.Users.AbpUserBase", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("onetouch.Authorization.Users.User", b =>
                {
                    b.HasOne("onetouch.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("onetouch.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("onetouch.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItems", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppMarketplaceItems.AppMarketplaceItems", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceItems.AppMarketplaceItems", "ParentFk")
                        .WithMany("ParentFkList")
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentFk");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionDetails", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionDetails", "ParentFk")
                        .WithMany("ParentFkList")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", "TransactionIdFk")
                        .WithMany("AppMarketplaceTransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFk");

                    b.Navigation("TransactionIdFk");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionDetails", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSiiwiiTransaction.AppTransactionDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppSiiwiiTransaction.AppTransactionDetails", "ParentFk")
                        .WithMany("ParentFkList")
                        .HasForeignKey("ParentId");

                    b.HasOne("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", "TransactionIdFk")
                        .WithMany("AppTransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFk");

                    b.Navigation("TransactionIdFk");
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "LanguageFk")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "PaymentTermsFk")
                        .WithMany()
                        .HasForeignKey("PaymentTermsId");

                    b.HasOne("onetouch.AppEntities.AppEntity", "ShipViaFk")
                        .WithMany()
                        .HasForeignKey("ShipViaId");

                    b.Navigation("CurrencyFk");

                    b.Navigation("LanguageFk");

                    b.Navigation("PaymentTermsFk");

                    b.Navigation("ShipViaFk");
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppFeature", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubScriptionPlan.AppFeature", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "UnitOfMeasurementFk")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitOfMeasurementFk");
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppSubscriptionPlanDetail", b =>
                {
                    b.HasOne("onetouch.AppSubScriptionPlan.AppSubscriptionPlanHeader", "AppSubscriptionPlanHeaderFk")
                        .WithMany()
                        .HasForeignKey("AppSubscriptionPlanHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubScriptionPlan.AppSubscriptionPlanDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSubscriptionPlanHeaderFk");
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppSubscriptionPlanHeader", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubScriptionPlan.AppSubscriptionPlanHeader", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppTenantActivitiesLog", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubScriptionPlan.AppTenantActivitiesLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", "RelatedEntityIdFk")
                        .WithMany()
                        .HasForeignKey("RelatedEntityId");

                    b.HasOne("onetouch.SystemObjects.SycEntityObjectType", "RelatedEntityObjectTypeFk")
                        .WithMany()
                        .HasForeignKey("RelatedEntityObjectTypeId");

                    b.Navigation("RelatedEntityIdFk");

                    b.Navigation("RelatedEntityObjectTypeFk");
                });

            modelBuilder.Entity("onetouch.AppSubScriptionPlan.AppTenantSubscriptionPlan", b =>
                {
                    b.HasOne("onetouch.AppSubScriptionPlan.AppSubscriptionPlanHeader", "AppSubscriptionPlanHeaderFk")
                        .WithMany()
                        .HasForeignKey("AppSubscriptionPlanHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubScriptionPlan.AppTenantSubscriptionPlan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSubscriptionPlanHeaderFk");
                });

            modelBuilder.Entity("onetouch.AppSubscriptionPlans.AppTenantInvoice", b =>
                {
                    b.HasOne("onetouch.AppEntities.AppEntity", null)
                        .WithOne()
                        .HasForeignKey("onetouch.AppSubscriptionPlans.AppTenantInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.AbpUserBase", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Navigation("DynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("onetouch.AppContacts.AppContact", b =>
                {
                    b.Navigation("AppContactAddresses");

                    b.Navigation("AppContactPaymentMethods");

                    b.Navigation("ParentFkList");

                    b.Navigation("PartnerFkList");
                });

            modelBuilder.Entity("onetouch.AppEntities.AppEntity", b =>
                {
                    b.Navigation("AppEntityReactionsCount");

                    b.Navigation("EntitiesRelationships");

                    b.Navigation("EntityAddresses");

                    b.Navigation("EntityAttachments");

                    b.Navigation("EntityCategories");

                    b.Navigation("EntityClassifications");

                    b.Navigation("EntityExtraData");

                    b.Navigation("RelatedEntitiesRelationships");
                });

            modelBuilder.Entity("onetouch.AppEvents.AppEvent", b =>
                {
                    b.Navigation("AppEventGuests");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItem", b =>
                {
                    b.Navigation("ItemPricesFkList");

                    b.Navigation("ItemSharingFkList");

                    b.Navigation("ItemSizeScaleHeadersFkList");

                    b.Navigation("ListingItemFkList");

                    b.Navigation("ParentFkList");

                    b.Navigation("PublishedListingItemFkList");
                });

            modelBuilder.Entity("onetouch.AppItems.AppItemSizeScalesHeader", b =>
                {
                    b.Navigation("AppItemSizeScalesDetails");
                });

            modelBuilder.Entity("onetouch.AppItems.AppSizeScalesHeader", b =>
                {
                    b.Navigation("AppSizeScalesDetails");
                });

            modelBuilder.Entity("onetouch.AppItemsLists.AppItemsList", b =>
                {
                    b.Navigation("AppItemsListDetails");

                    b.Navigation("ItemSharingFkList");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItemSizeScaleHeaders", b =>
                {
                    b.Navigation("AppItemSizeScalesDetails");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceMessages.AppMarketplaceMessage", b =>
                {
                    b.Navigation("ParentFKList");
                });

            modelBuilder.Entity("onetouch.Authorization.Roles.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("onetouch.AutoTaskTicketNotes.TicketNote", b =>
                {
                    b.Navigation("EntityAttachments");
                });

            modelBuilder.Entity("onetouch.AutoTaskTickets.Ticket", b =>
                {
                    b.Navigation("EntityAttachments");
                });

            modelBuilder.Entity("onetouch.Message.AppMessage", b =>
                {
                    b.Navigation("ParentFKList");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectCategory", b =>
                {
                    b.Navigation("SycEntityObjectCategories");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectClassification", b =>
                {
                    b.Navigation("SycEntityObjectClassifications");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SycEntityObjectType", b =>
                {
                    b.Navigation("SycEntityObjectTypes");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SydObject", b =>
                {
                    b.Navigation("SydObjects");
                });

            modelBuilder.Entity("onetouch.SystemObjects.SysObjectType", b =>
                {
                    b.Navigation("SysObjectTypes");
                });

            modelBuilder.Entity("onetouch.Authorization.Users.User", b =>
                {
                    b.Navigation("OrganizationUnits");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItemLists.AppMarketplaceItemLists", b =>
                {
                    b.Navigation("AppItemsListDetails");

                    b.Navigation("ItemSharingFkList");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceItems.AppMarketplaceItems", b =>
                {
                    b.Navigation("ItemPricesFkList");

                    b.Navigation("ItemSharingFkList");

                    b.Navigation("ItemSizeScaleHeadersFkList");

                    b.Navigation("ParentFkList");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionDetails", b =>
                {
                    b.Navigation("ParentFkList");
                });

            modelBuilder.Entity("onetouch.AppMarketplaceTransactions.AppMarketplaceTransactionHeaders", b =>
                {
                    b.Navigation("AppMarketplaceTransactionContacts");

                    b.Navigation("AppMarketplaceTransactionDetails");
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionDetails", b =>
                {
                    b.Navigation("ParentFkList");
                });

            modelBuilder.Entity("onetouch.AppSiiwiiTransaction.AppTransactionHeaders", b =>
                {
                    b.Navigation("AppTransactionContacts");

                    b.Navigation("AppTransactionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
