using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace onetouch.Migrations
{
    /// <inheritdoc />
    public partial class transcontactviewupdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("CREATE OR ALTER   VIEW [dbo].[vw_contact_address]\r\nAS\r\nSELECT  dbo.AppTransactionContacts.ContactRole, dbo.AppTransactionContacts.TransactionId, dbo.AppTransactionContacts.Id, dbo.AppTransactionContacts.CreationTime, dbo.AppTransactionContacts.CreatorUserId, dbo.AppTransactionContacts.LastModificationTime, \r\n                         dbo.AppTransactionContacts.LastModifierUserId, dbo.AppTransactionContacts.IsDeleted, dbo.AppTransactionContacts.DeleterUserId, dbo.AppTransactionContacts.DeletionTime, 0 as TenantId, dbo.AppTransactionContacts.ContactAddressCode as Code, dbo.AppTransactionContacts.ContactAddressName as Name, \r\n                         dbo.AppTransactionContacts.ContactAddressLine1 as AddressLine1, dbo.AppTransactionContacts.ContactAddressLine2 as AddressLine2, dbo.AppTransactionContacts.ContactAddressCity as City, dbo.AppTransactionContacts.ContactAddressState as State, dbo.AppTransactionContacts.ContactAddressPostalCode as PostalCode, dbo.AppTransactionContacts.ContactAddressCountryId as CountryId, dbo.AppTransactionContacts.ContactAddressCountryCode as CountryCode, \r\n                         dbo.AppTransactionContacts.ContactSSIN as AccountId\r\nFROM  dbo.AppTransactionContacts where dbo.AppTransactionContacts.IsDeleted=0 \r\nGO ");
            migrationBuilder.Sql("\r\nCREATE OR ALTER  PROCEDURE [dbo].[Color_Sizes2](@ItemId as bigint, @attachmentBaseUrl as nvarchar(250),@showNo as bigint,\r\n@productListId  as bigint,\r\n@onlyInStockColors as bit = 0,@mimimumInStockQty as bigint=0)\r\n\t-- Add the parameters for the stored procedure here\r\n\t\r\nAS\r\nBEGIN\r\n\t-- SET NOCOUNT ON added to prevent extra result sets from\r\n\t-- interfering with SELECT statements.\r\n\tSET NOCOUNT ON;\r\n\r\n      -- Insert statements for procedure here\r\n--declare @showNo bigint = 500\r\ndeclare @foundNo bigint = 0\r\ndeclare @counter bigint = 1\t \r\n\r\n --declare @attachmentBaseUrl nvarchar(200) = 'aa'\r\n    -- Insert statements for procedure here\r\n\t--declare @ItemId bigint\r\ndeclare @maxSize bigint = 10\t \r\n\tif (@showNo = 20)\r\n\tBegin\r\n\tSet @showNo = 8\r\n\tSet @maxSize = 20\r\n\tEnd\r\n\tif (@showNo = 12)\r\n\tBegin\r\n\tSet @showNo = 0\r\n\tSet @maxSize = 20\r\n\tEnd\r\n\tif (@ItemId=0 or @ItemId IS NULL)\r\n\tBegin\r\n\tSet @ItemId= 1561486\r\n\tEnd\r\nset @attachmentBaseUrl = 'http://localhost'\t\r\nset @attachmentBaseUrl = 'https://localhost:44301'\r\nDECLARE @colnameListValues varchar(max)\r\nDECLARE @colnameListValues2 varchar(max)\r\nDECLARE @colnameListValues3 varchar(max)\r\nDECLARE @colnameListHeaders varchar(max)\r\nDECLARE @colnameListHeaders2 varchar(max)\r\n\r\nDECLARE @colnameListSum varchar(max)\r\n\r\nSET @colnameListValues = NULL\r\nSET @colnameListValues2 = NULL\r\nSET @colnameListValues3 = ''\r\nSET @colnameListHeaders = NULL\r\nSET @colnameListHeaders2 = NULL\r\nSET @colnameListSum = NULL\r\n\r\n--update xxx set apppitemid = @ItemId\r\n--update xxx set  appitemlistid=@productListId \r\n--update xxx set showno=@showNo\r\n--update xxx set sqltext='aaa'\r\n\r\n--Declare @productListId  int = 0\r\nDeclare @T Table (AttributeValue2  nvarchar(250), id int)\r\nInsert @T Exec [dbo].[GetVariations] @ItemId,@productListId\r\n--Select * from @T \r\n\r\n\r\nSELECT   \r\n@foundNo = @foundNo +1,\r\n@colnameListValues = COALESCE(@colnameListValues + ',','') + QUOTENAME(AttributeValue2, '\"'),\r\n@colnameListHeaders = COALESCE(@colnameListHeaders + ',','') + '['+AttributeValue2+'] as Size'+ltrim(str(@foundNo)),\r\n@colnameListValues2 = COALESCE(@colnameListValues2 + ',','') + QUOTENAME(RIGHT( space(9)+AttributeValue2, 9), '''')+' as Size'+ltrim(str(@foundNo)),\r\n@colnameListHeaders2 = COALESCE(@colnameListHeaders2 + ',','') + 'Size'+ltrim(str(@foundNo))+' as Size'+ltrim(str(@foundNo)),\r\n@colnameListSum = COALESCE(@colnameListSum + '+','') + 'isnull(Size'+ltrim(str(@foundNo))+ ',0) '\r\nFROM @T\r\n\r\n\r\n  if (@colnameListSum is not null) \r\n  begin\r\n    Set @colnameListSum = '('+@colnameListSum + ' + 0) as total'\r\n  End \r\n\r\nDECLARE @SQLQuery NVARCHAR(MAX)\r\nSET @SQLQuery =\r\n'SELECT '+str(@ItemId)+'as ItemId, attachment,AttributeValue ,attributecode,'+cast( @foundNo as varchar)+' as counter,AttributeValue3 ,'+@colnameListHeaders+'\r\nFROM \r\n( SELECT SM.AttributeValue, sm.attributecode,'''+\r\n@attachmentBaseUrl+'/attachments/' + '''+sm.attachment as attachment'\r\n+',Sm.AttributeValue2, Sm.AttributeValue3, SM.StockAvailability\r\nFROM vw_variation_sock SM where parentid='+str(@ItemId ) +\r\n'and \r\n\t\t('+str(@productListId) +' = 0 or (AppItemId in \r\n\t\t\t\t\t\t(select itemid from AppItemsListDetails where AppItemsListDetails.ItemsListId = '+str(@productListId) +')))'\r\n\r\n\r\n\r\n+'\r\n) AS tbl\r\nPIVOT \r\n( Sum(StockAvailability)\r\nFOR \"'+'AttributeValue2'+'\"  IN ('+@colnameListValues+') ) as pvt'\r\n \t\t\t\t\t   \r\n\r\n--SET @SQLQuery ='4SELECT top(1) '+str(@ItemId)+' as ItemId, Space(1) as Attachment,Space(1) as AttributeValue, Space(1) as AttributeValue3 ,'+@colnameListValues2+\r\n--',  ''Total'' as Total FROM appItems'\r\n--+' union '+ \r\nset @SQLQuery = ' Select ROW_NUMBER() OVER(ORDER BY AttributeValue) AS num_row, ItemId,Attachment,  AttributeValue,Attributecode,counter, AttributeValue3, '+@colnameListHeaders2+',' + @colnameListSum+ ' from ('\r\n+@SQLQuery + ') as yy '\r\n\r\ndeclare @selectCol nvarchar(max) = ''\r\ndeclare @selectColSum nvarchar(max) = ''\r\ndeclare @counterMid bigint = 0\r\n-- select just showNo \r\n--if((@showNo < @foundNo) and (@showNo > 1))\r\nif((@showNo < @foundNo) )\r\nbegin\r\n    set @selectCol = ''\r\n\tif (@showNo > 1)\r\n\tbegin\r\n\t while @counter < (@showNo -1)\r\n\t begin\r\n\t \tset @selectCol = @selectCol+ 'Size'+cast(@counter as nvarchar(10))+','\r\n\t \tset @colnameListValues3 = @colnameListValues3 +'str(sum( size'+cast(@counter as nvarchar(10))+' )) as size'+cast(@counter as nvarchar(10))+','\r\n\t \tset @counter = @counter +1\r\n\t end \r\n\tend \r\n\t\r\n\tset @counterMid  =@counter + 1\r\n\r\n\tset @colnameListValues3 = @colnameListValues3 +'str(sum(size'+cast(@counter as nvarchar(10))+' )) as size'+cast(@counter as nvarchar(10))+','\r\n\t+'str(sum( size'+cast(@counterMid as nvarchar(10))+' )) as size'+cast(@counterMid as nvarchar(10))+','+'str(sum( total )) as total'\r\n\tset @selectCol = @selectCol+ 'Size'+cast(@counter as nvarchar(10))\r\n\r\n\tset @selectColSum  = ''\r\n\t\r\n\twhile @counter <@foundNo\r\n\tbegin\r\n\t\tset @counter = @counter +1\r\n\t\t--set @selectColSum = @selectColSum + 'cast(Size'+ cast(@counter as nvarchar(10))+' as int) +'\r\n\t\tset @selectColSum = @selectColSum + 'Size'+ cast(@counter as nvarchar(10))+' +'\r\n\tend \r\n\tset @selectColSum = '('+@selectColSum + '0 ) as Size'+ cast(@counterMid as nvarchar(10))\r\n\tSET @SQLQuery ='SELECT num_row, ItemId, Attachment,(case when num_row < ' + cast(@maxSize as nvarchar(10)) + ' then AttributeValue else ''More'' end) as AttributeValue,AttributeCode, counter,AttributeValue3, ' + @selectCol  + ', ' + @selectColSum +',total from ( '+\r\n\t\t+@SQLQuery+') as mmm where (('+cast(@onlyInStockColors as nvarchar(1))+'=1 and total> '+cast(@mimimumInStockQty as nvarchar(10))+') or ('+cast(@onlyInStockColors as nvarchar(1))+'=0))'\r\n    set @colnameListValues2 = SUBSTRING(  @colnameListValues2,0, CHARINDEX('Size'+cast(@showNo-1 as nvarchar(10))+',',@colnameListValues2,3)+5)+',''     More'' as Size'+cast(@showNo as nvarchar(10))\r\n\r\nend\r\n--if((@showNo < @foundNo) and (@showNo=1))\r\n--begin\r\n  --  set @colnameListValues2 = '''More'' as Size'+cast(@showNo as nvarchar(10))\r\n\t\r\n--end\r\n\r\n\r\nif(@showNo >= @foundNo)\r\nbegin\r\n    set @selectCol  = ''\r\n\twhile @counter <= @foundNo \r\n\tbegin\r\n\t\tset @selectCol = @selectCol+ 'Size'+cast(@counter as nvarchar(10))+','\r\n\t\tset @colnameListValues3 = @colnameListValues3 +'str(sum( size'+cast(@counter as nvarchar(10))+' )) as size'+cast(@counter as nvarchar(10))+','\r\n\t\tset @counter = @counter +1\r\n\tend \r\n\t\r\n\t--set @counterMid = @counter + 1\r\n\r\n\tset @colnameListValues3 = @colnameListValues3 +'str(sum( total )) as total'\r\n\t--set @selectCol = @selectCol+ 'Size'+cast(@counter as nvarchar(10))\r\n\r\n\tset @selectColSum  = ''\r\n\t\r\n\t--while @counter <=@foundNo\r\n\t--begin\r\n\t\t--set @counter = @counter +1\r\n\t\t--set @selectColSum = @selectColSum + 'Size'+ cast(@counter as nvarchar(10))+' +'\r\n\t--end \r\n\t--set @selectColSum = '('+@selectColSum + '0 ) as Size'+ cast(@counterMid as nvarchar(10))\r\n\tSET @SQLQuery ='SELECT num_row, ItemId, Attachment,(case when num_row <  ' + cast(@maxSize as nvarchar(10)) + '  then AttributeValue else ''More'' end) as AttributeValue, AttributeCode, counter,AttributeValue3, ' + @selectCol  +'total from ( '+\r\n\t\t+@SQLQuery+') as mmm where (('+cast(@onlyInStockColors as nvarchar(1))+'=1 and total> '+cast(@mimimumInStockQty as nvarchar(10))+') or ('+cast(@onlyInStockColors as nvarchar(1))+'=0))'\r\n    --set @colnameListValues2 = SUBSTRING(  @colnameListValues2,0, CHARINDEX('Size'+cast(@showNo-1 as nvarchar(10))+',',@colnameListValues2,3)+5)+',''More'' as Size'+cast(@showNo as nvarchar(10))\r\n\r\nend\r\nset @colnameListValues2 = +','+@colnameListValues2 + ',  ''     Total'' as Total FROM appItems'\r\nif (@showNo=0)\r\nbegin\r\n  set @colnameListValues2 = ',  ''     Total'' as Total FROM appItems'\r\n set @colnameListValues3 = ' str(sum( total )) as total'\t\r\nend\r\n\r\nset @SQLQuery = 'select max(num_row) as num_row, max(itemid) as itemid, max(Attachment)  as Attachment, AttributeValue,AttributeCode, max(counter) as counter, max(AttributeValue3) as AttributeValue3, '+\r\n@colnameListValues3\r\n+' from ('+ @SQLQuery + ' ) as xx group by attributevalue,attributecode order by num_row'\r\n\r\n\r\nSET @SQLQuery ='SELECT top(1) 0 as num_row,'+str(@ItemId)+' as ItemId, Space(1) as Attachment,''Color Name'' as AttributeValue, ''Color Code'' AS AttributeCode, '+str(@foundNo)+' as counter, ''Start Ship Date'' as AttributeValue3 '\r\n+@colnameListValues2\r\n\r\n+' union '+ @SQLQuery\r\n\r\n--select top(1) @SQLQuery from appitems \r\n--update xxx set sqltext = @productListId +10\r\nEXEC(@SQLQuery)\t\t\r\n \r\n \r\nEND\r\nGO\r\n\r\n\r\n");
            migrationBuilder.Sql("CREATE OR ALTER     VIEW [dbo].[vw_AppTransactionDetails]\r\nAS\r\nSELECT         MAX(Id) AS Id, MAX(TransactionId) AS TransactionId, MAX(TransactionCode) AS TransactionCode, MAX([LineNo]) AS [LineNo], SUM(Quantity) AS Quantity, MAX(GrossPrice) AS GrossPrice, MAX(NetPrice) AS NetPrice, \r\n                         MAX(Discount) AS Discount, SUM(Amount) AS Amount, MAX(ItemCode) AS ItemCode, MAX(ItemDescription) AS ItemDescription, MAX(Note) AS Note, ItemSSIN, SUM(NoOfPrePacks) AS NoOfPrePacks, MAX(ParentId) AS ParentId, \r\n                         MAX(ManufacturerCode) AS ManufacturerCode, MAX(AttributeCode) AS AttributeCode, MAX(AttributeSizeId) AS AttributeSizeId, MAX(AttributeSizeCode) AS AttributeSizeCode, MAX(Attachment) AS Attachment\r\nFROM            (SELECT DISTINCT \r\n                                                    dbo.AppTransactionDetails.Id, dbo.AppTransactionDetails.TransactionId, dbo.AppTransactionDetails.TransactionCode, dbo.AppTransactionDetails.[LineNo], dbo.AppTransactionDetails.Quantity, \r\n                                                    dbo.AppTransactionDetails.GrossPrice, dbo.AppTransactionDetails.NetPrice, dbo.AppTransactionDetails.Discount, dbo.AppTransactionDetails.Amount, dbo.AppTransactionDetails.ItemCode, \r\n                                                    dbo.AppItems.Name as ItemDescription, dbo.AppTransactionDetails.Note, dbo.AppTransactionDetails.ItemSSIN, dbo.AppTransactionDetails.NoOfPrePacks, dbo.AppTransactionDetails.ParentId, \r\n                                                    dbo.AppTransactionDetails.ManufacturerCode, AA.AttributeId, AA.AttributeCode, AB.AttributeId AS AttributeSizeId, AB.AttributeCode AS AttributeSizeCode\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t, (select top(1) AppAttachments.Attachment from AppEntityExtraData inner join AppEntityAttachments  on  AppEntityExtraData.EntityId = AppEntityAttachments.EntityId  inner join AppAttachments on AppAttachments.id = AppEntityAttachments.AttachmentId   where AppEntityExtraData.EntityId in (select entityid from appitems where parentid = 279231) and AttributeId=101 and AttributeCode=AA.AttributeCode)  as Attachment\r\n                          FROM            dbo.AppTransactionDetails INNER JOIN\r\n                                                    dbo.AppItems ON dbo.AppTransactionDetails.ItemSSIN = dbo.AppItems.SSIN INNER JOIN\r\n                                                    dbo.AppEntityExtraData AS AA ON dbo.AppItems.EntityId = AA.EntityId LEFT OUTER  JOIN\r\n                                                    dbo.AppEntityExtraData AS AB ON dbo.AppItems.EntityId = AB.EntityId \r\n                          WHERE        (AA.AttributeId = 101) AND (AB.AttributeId = 105)) AS derivedtbl_1\r\nGROUP BY TransactionId, ItemSSIN\r\nGO\r\n");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[Color_Sizes2]\r\nGO\r\n")
            migrationBuilder.Sql("CREATE OR ALTER VIEW [dbo].[vw_contact_address]\r\nAS\r\nSELECT        TOP (1) dbo.AppTransactionContacts.ContactRole, dbo.AppTransactionContacts.TransactionId, dbo.AppAddresses.Id, dbo.AppAddresses.CreationTime, dbo.AppAddresses.CreatorUserId, dbo.AppAddresses.LastModificationTime, \r\n                         dbo.AppAddresses.LastModifierUserId, dbo.AppAddresses.IsDeleted, dbo.AppAddresses.DeleterUserId, dbo.AppAddresses.DeletionTime, dbo.AppAddresses.TenantId, dbo.AppAddresses.Code, dbo.AppAddresses.Name, \r\n                         dbo.AppAddresses.AddressLine1, dbo.AppAddresses.AddressLine2, dbo.AppAddresses.City, dbo.AppAddresses.State, dbo.AppAddresses.PostalCode, dbo.AppAddresses.CountryId, dbo.AppAddresses.CountryCode, \r\n                         dbo.AppAddresses.AccountId\r\nFROM            dbo.AppTransactionContacts INNER JOIN\r\n                         dbo.AppAddresses ON dbo.AppTransactionContacts.ContactAddressId = dbo.AppAddresses.Id\r\nGO\r\n");
            migrationBuilder.Sql("CREATE OR ALTER VIEW [dbo].[vw_AppTransactionDetails]\r\nAS\r\nSELECT        TOP (1000) MAX(Id) AS Id, MAX(TransactionId) AS TransactionId, MAX(TransactionCode) AS TransactionCode, MAX([LineNo]) AS [LineNo], SUM(Quantity) AS Quantity, MAX(GrossPrice) AS GrossPrice, MAX(NetPrice) AS NetPrice, \r\n                         MAX(Discount) AS Discount, SUM(Amount) AS Amount, MAX(ItemCode) AS ItemCode, MAX(ItemDescription) AS ItemDescription, MAX(Note) AS Note, ItemSSIN, SUM(NoOfPrePacks) AS NoOfPrePacks, MAX(ParentId) AS ParentId, \r\n                         MAX(ManufacturerCode) AS ManufacturerCode, MAX(AttributeCode) AS AttributeCode, MAX(AttributeSizeId) AS AttributeSizeId, MAX(AttributeSizeCode) AS AttributeSizeCode, MAX(Attachment) AS Attachment\r\nFROM            (SELECT DISTINCT \r\n                                                    TOP (100) PERCENT dbo.AppTransactionDetails.Id, dbo.AppTransactionDetails.TransactionId, dbo.AppTransactionDetails.TransactionCode, dbo.AppTransactionDetails.[LineNo], dbo.AppTransactionDetails.Quantity, \r\n                                                    dbo.AppTransactionDetails.GrossPrice, dbo.AppTransactionDetails.NetPrice, dbo.AppTransactionDetails.Discount, dbo.AppTransactionDetails.Amount, dbo.AppTransactionDetails.ItemCode, \r\n                                                    dbo.AppTransactionDetails.ItemDescription, dbo.AppTransactionDetails.Note, dbo.AppTransactionDetails.ItemSSIN, dbo.AppTransactionDetails.NoOfPrePacks, dbo.AppTransactionDetails.ParentId, \r\n                                                    dbo.AppTransactionDetails.ManufacturerCode, AA.AttributeId, AA.AttributeCode, AB.AttributeId AS AttributeSizeId, AB.AttributeCode AS AttributeSizeCode, dbo.AppAttachments.Attachment\r\n                          FROM            dbo.AppTransactionDetails INNER JOIN\r\n                                                    dbo.AppItems ON dbo.AppTransactionDetails.ItemSSIN = dbo.AppItems.SSIN INNER JOIN\r\n                                                    dbo.AppEntityExtraData AS AA ON dbo.AppItems.EntityId = AA.EntityId INNER JOIN\r\n                                                    dbo.AppEntityExtraData AS AB ON dbo.AppItems.EntityId = AB.EntityId INNER JOIN\r\n                                                    dbo.AppEntityAttachments ON dbo.AppItems.EntityId = dbo.AppEntityAttachments.EntityId INNER JOIN\r\n                                                    dbo.AppAttachments ON dbo.AppEntityAttachments.AttachmentId = dbo.AppAttachments.Id\r\n                          WHERE        (AA.AttributeId = 101) AND (AB.AttributeId = 105)) AS derivedtbl_1\r\nGROUP BY TransactionId, ItemSSIN\r\nGO\r\n ");
        }
    }
}
