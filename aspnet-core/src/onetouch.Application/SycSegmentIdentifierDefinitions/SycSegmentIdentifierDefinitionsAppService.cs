using onetouch.SycIdentifierDefinitions;

using System;
using System.Linq;
using System.Linq.Dynamic.Core;
using Abp.Linq.Extensions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Abp.Domain.Repositories;
using onetouch.SycSegmentIdentifierDefinitions.Exporting;
using onetouch.SycSegmentIdentifierDefinitions.Dtos;
using onetouch.Dto;
using Abp.Application.Services.Dto;
using onetouch.Authorization;
using Abp.Extensions;
using Abp.Authorization;
using Microsoft.EntityFrameworkCore;
using Abp.UI;
using onetouch.Storage;

namespace onetouch.SycSegmentIdentifierDefinitions
{
    [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions)]
    public class SycSegmentIdentifierDefinitionsAppService : onetouchAppServiceBase, ISycSegmentIdentifierDefinitionsAppService
    {
        private readonly IRepository<SycSegmentIdentifierDefinition, long> _sycSegmentIdentifierDefinitionRepository;
        private readonly ISycSegmentIdentifierDefinitionsExcelExporter _sycSegmentIdentifierDefinitionsExcelExporter;
        private readonly IRepository<SycIdentifierDefinition, long> _lookup_sycIdentifierDefinitionRepository;

        public SycSegmentIdentifierDefinitionsAppService(IRepository<SycSegmentIdentifierDefinition, long> sycSegmentIdentifierDefinitionRepository, ISycSegmentIdentifierDefinitionsExcelExporter sycSegmentIdentifierDefinitionsExcelExporter, IRepository<SycIdentifierDefinition, long> lookup_sycIdentifierDefinitionRepository)
        {
            _sycSegmentIdentifierDefinitionRepository = sycSegmentIdentifierDefinitionRepository;
            _sycSegmentIdentifierDefinitionsExcelExporter = sycSegmentIdentifierDefinitionsExcelExporter;
            _lookup_sycIdentifierDefinitionRepository = lookup_sycIdentifierDefinitionRepository;

        }

        public async Task<PagedResultDto<GetSycSegmentIdentifierDefinitionForViewDto>> GetAll(GetAllSycSegmentIdentifierDefinitionsInput input)
        {

            var filteredSycSegmentIdentifierDefinitions = _sycSegmentIdentifierDefinitionRepository.GetAll()
                        .Include(e => e.SycIdentifierDefinitionFk)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false || e.Code.Contains(input.Filter) || e.Name.Contains(input.Filter) || e.SegmentHeader.Contains(input.Filter) || e.SegmentMask.Contains(input.Filter) || e.SegmentType.Contains(input.Filter) || e.LookOrFieldName.Contains(input.Filter))
                        .WhereIf(!string.IsNullOrWhiteSpace(input.CodeFilter), e => e.Code == input.CodeFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.NameFilter), e => e.Name == input.NameFilter)
                        .WhereIf(input.MinSegmentNumberFilter != null, e => e.SegmentNumber >= input.MinSegmentNumberFilter)
                        .WhereIf(input.MaxSegmentNumberFilter != null, e => e.SegmentNumber <= input.MaxSegmentNumberFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentHeaderFilter), e => e.SegmentHeader == input.SegmentHeaderFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentMaskFilter), e => e.SegmentMask == input.SegmentMaskFilter)
                        .WhereIf(input.MinSegmentLengthFilter != null, e => e.SegmentLength >= input.MinSegmentLengthFilter)
                        .WhereIf(input.MaxSegmentLengthFilter != null, e => e.SegmentLength <= input.MaxSegmentLengthFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentTypeFilter), e => e.SegmentType == input.SegmentTypeFilter)
                        .WhereIf(input.IsAutoGeneratedFilter.HasValue && input.IsAutoGeneratedFilter > -1, e => (input.IsAutoGeneratedFilter == 1 && e.IsAutoGenerated) || (input.IsAutoGeneratedFilter == 0 && !e.IsAutoGenerated))
                        .WhereIf(input.IsEditableFilter.HasValue && input.IsEditableFilter > -1, e => (input.IsEditableFilter == 1 && e.IsEditable) || (input.IsEditableFilter == 0 && !e.IsEditable))
                        .WhereIf(input.IsVisibleFilter.HasValue && input.IsVisibleFilter > -1, e => (input.IsVisibleFilter == 1 && e.IsVisible) || (input.IsVisibleFilter == 0 && !e.IsVisible))
                        .WhereIf(input.MinCodeStartingValueFilter != null, e => e.CodeStartingValue >= input.MinCodeStartingValueFilter)
                        .WhereIf(input.MaxCodeStartingValueFilter != null, e => e.CodeStartingValue <= input.MaxCodeStartingValueFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.LookOrFieldNameFilter), e => e.LookOrFieldName == input.LookOrFieldNameFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SycIdentifierDefinitionCodeFilter), e => e.SycIdentifierDefinitionFk != null && e.SycIdentifierDefinitionFk.Code == input.SycIdentifierDefinitionCodeFilter);

            var pagedAndFilteredSycSegmentIdentifierDefinitions = filteredSycSegmentIdentifierDefinitions
                .OrderBy(input.Sorting ?? "id asc")
                .PageBy(input);

            var sycSegmentIdentifierDefinitions = from o in pagedAndFilteredSycSegmentIdentifierDefinitions
                                                  join o1 in _lookup_sycIdentifierDefinitionRepository.GetAll() on o.SycIdentifierDefinitionId equals o1.Id into j1
                                                  from s1 in j1.DefaultIfEmpty()

                                                  select new
                                                  {

                                                      o.Code,
                                                      o.Name,
                                                      o.SegmentNumber,
                                                      o.SegmentHeader,
                                                      o.SegmentMask,
                                                      o.SegmentLength,
                                                      o.SegmentType,
                                                      o.IsAutoGenerated,
                                                      o.IsEditable,
                                                      o.IsVisible,
                                                      o.CodeStartingValue,
                                                      o.LookOrFieldName,
                                                      Id = o.Id,
                                                      SycIdentifierDefinitionCode = s1 == null || s1.Code == null ? "" : s1.Code.ToString()
                                                  };

            var totalCount = await filteredSycSegmentIdentifierDefinitions.CountAsync();

            var dbList = await sycSegmentIdentifierDefinitions.ToListAsync();
            var results = new List<GetSycSegmentIdentifierDefinitionForViewDto>();

            foreach (var o in dbList)
            {
                var res = new GetSycSegmentIdentifierDefinitionForViewDto()
                {
                    SycSegmentIdentifierDefinition = new SycSegmentIdentifierDefinitionDto
                    {

                        Code = o.Code,
                        Name = o.Name,
                        SegmentNumber = o.SegmentNumber,
                        SegmentHeader = o.SegmentHeader,
                        SegmentMask = o.SegmentMask,
                        SegmentLength = o.SegmentLength,
                        SegmentType = o.SegmentType,
                        IsAutoGenerated = o.IsAutoGenerated,
                        IsEditable = o.IsEditable,
                        IsVisible = o.IsVisible,
                        CodeStartingValue = o.CodeStartingValue,
                        LookOrFieldName = o.LookOrFieldName,
                        Id = o.Id,
                    },
                    SycIdentifierDefinitionCode = o.SycIdentifierDefinitionCode
                };

                results.Add(res);
            }

            return new PagedResultDto<GetSycSegmentIdentifierDefinitionForViewDto>(
                totalCount,
                results
            );

        }

        public async Task<GetSycSegmentIdentifierDefinitionForViewDto> GetSycSegmentIdentifierDefinitionForView(long id)
        {
            var sycSegmentIdentifierDefinition = await _sycSegmentIdentifierDefinitionRepository.GetAsync(id);

            var output = new GetSycSegmentIdentifierDefinitionForViewDto { SycSegmentIdentifierDefinition = ObjectMapper.Map<SycSegmentIdentifierDefinitionDto>(sycSegmentIdentifierDefinition) };

            if (output.SycSegmentIdentifierDefinition.SycIdentifierDefinitionId != null)
            {
                var _lookupSycIdentifierDefinition = await _lookup_sycIdentifierDefinitionRepository.FirstOrDefaultAsync((long)output.SycSegmentIdentifierDefinition.SycIdentifierDefinitionId);
                output.SycIdentifierDefinitionCode = _lookupSycIdentifierDefinition?.Code?.ToString();
            }

            return output;
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions_Edit)]
        public async Task<GetSycSegmentIdentifierDefinitionForEditOutput> GetSycSegmentIdentifierDefinitionForEdit(EntityDto<long> input)
        {
            var sycSegmentIdentifierDefinition = await _sycSegmentIdentifierDefinitionRepository.FirstOrDefaultAsync(input.Id);

            var output = new GetSycSegmentIdentifierDefinitionForEditOutput { SycSegmentIdentifierDefinition = ObjectMapper.Map<CreateOrEditSycSegmentIdentifierDefinitionDto>(sycSegmentIdentifierDefinition) };

            if (output.SycSegmentIdentifierDefinition.SycIdentifierDefinitionId != null)
            {
                var _lookupSycIdentifierDefinition = await _lookup_sycIdentifierDefinitionRepository.FirstOrDefaultAsync((long)output.SycSegmentIdentifierDefinition.SycIdentifierDefinitionId);
                output.SycIdentifierDefinitionCode = _lookupSycIdentifierDefinition?.Code?.ToString();
            }

            return output;
        }

        public async Task CreateOrEdit(CreateOrEditSycSegmentIdentifierDefinitionDto input)
        {
            if (input.Id == null)
            {
                await Create(input);
            }
            else
            {
                await Update(input);
            }
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions_Create)]
        protected virtual async Task Create(CreateOrEditSycSegmentIdentifierDefinitionDto input)
        {
            var sycSegmentIdentifierDefinition = ObjectMapper.Map<SycSegmentIdentifierDefinition>(input);

            if (AbpSession.TenantId != null)
            {
                sycSegmentIdentifierDefinition.TenantId = (int?)AbpSession.TenantId;
            }

            await _sycSegmentIdentifierDefinitionRepository.InsertAsync(sycSegmentIdentifierDefinition);

        }

        [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions_Edit)]
        protected virtual async Task Update(CreateOrEditSycSegmentIdentifierDefinitionDto input)
        {
            var sycSegmentIdentifierDefinition = await _sycSegmentIdentifierDefinitionRepository.FirstOrDefaultAsync((long)input.Id);
            ObjectMapper.Map(input, sycSegmentIdentifierDefinition);

        }

        [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions_Delete)]
        public async Task Delete(EntityDto<long> input)
        {
            //await _sycSegmentIdentifierDefinitionRepository.DeleteAsync(input.Id);
        }

        public async Task<FileDto> GetSycSegmentIdentifierDefinitionsToExcel(GetAllSycSegmentIdentifierDefinitionsForExcelInput input)
        {

            var filteredSycSegmentIdentifierDefinitions = _sycSegmentIdentifierDefinitionRepository.GetAll()
                        .Include(e => e.SycIdentifierDefinitionFk)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.Filter), e => false || e.Code.Contains(input.Filter) || e.Name.Contains(input.Filter) || e.SegmentHeader.Contains(input.Filter) || e.SegmentMask.Contains(input.Filter) || e.SegmentType.Contains(input.Filter) || e.LookOrFieldName.Contains(input.Filter))
                        .WhereIf(!string.IsNullOrWhiteSpace(input.CodeFilter), e => e.Code == input.CodeFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.NameFilter), e => e.Name == input.NameFilter)
                        .WhereIf(input.MinSegmentNumberFilter != null, e => e.SegmentNumber >= input.MinSegmentNumberFilter)
                        .WhereIf(input.MaxSegmentNumberFilter != null, e => e.SegmentNumber <= input.MaxSegmentNumberFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentHeaderFilter), e => e.SegmentHeader == input.SegmentHeaderFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentMaskFilter), e => e.SegmentMask == input.SegmentMaskFilter)
                        .WhereIf(input.MinSegmentLengthFilter != null, e => e.SegmentLength >= input.MinSegmentLengthFilter)
                        .WhereIf(input.MaxSegmentLengthFilter != null, e => e.SegmentLength <= input.MaxSegmentLengthFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SegmentTypeFilter), e => e.SegmentType == input.SegmentTypeFilter)
                        .WhereIf(input.IsAutoGeneratedFilter.HasValue && input.IsAutoGeneratedFilter > -1, e => (input.IsAutoGeneratedFilter == 1 && e.IsAutoGenerated) || (input.IsAutoGeneratedFilter == 0 && !e.IsAutoGenerated))
                        .WhereIf(input.IsEditableFilter.HasValue && input.IsEditableFilter > -1, e => (input.IsEditableFilter == 1 && e.IsEditable) || (input.IsEditableFilter == 0 && !e.IsEditable))
                        .WhereIf(input.IsVisibleFilter.HasValue && input.IsVisibleFilter > -1, e => (input.IsVisibleFilter == 1 && e.IsVisible) || (input.IsVisibleFilter == 0 && !e.IsVisible))
                        .WhereIf(input.MinCodeStartingValueFilter != null, e => e.CodeStartingValue >= input.MinCodeStartingValueFilter)
                        .WhereIf(input.MaxCodeStartingValueFilter != null, e => e.CodeStartingValue <= input.MaxCodeStartingValueFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.LookOrFieldNameFilter), e => e.LookOrFieldName == input.LookOrFieldNameFilter)
                        .WhereIf(!string.IsNullOrWhiteSpace(input.SycIdentifierDefinitionCodeFilter), e => e.SycIdentifierDefinitionFk != null && e.SycIdentifierDefinitionFk.Code == input.SycIdentifierDefinitionCodeFilter);

            var query = (from o in filteredSycSegmentIdentifierDefinitions
                         join o1 in _lookup_sycIdentifierDefinitionRepository.GetAll() on o.SycIdentifierDefinitionId equals o1.Id into j1
                         from s1 in j1.DefaultIfEmpty()

                         select new GetSycSegmentIdentifierDefinitionForViewDto()
                         {
                             SycSegmentIdentifierDefinition = new SycSegmentIdentifierDefinitionDto
                             {
                                 Code = o.Code,
                                 Name = o.Name,
                                 SegmentNumber = o.SegmentNumber,
                                 SegmentHeader = o.SegmentHeader,
                                 SegmentMask = o.SegmentMask,
                                 SegmentLength = o.SegmentLength,
                                 SegmentType = o.SegmentType,
                                 IsAutoGenerated = o.IsAutoGenerated,
                                 IsEditable = o.IsEditable,
                                 IsVisible = o.IsVisible,
                                 CodeStartingValue = o.CodeStartingValue,
                                 LookOrFieldName = o.LookOrFieldName,
                                 Id = o.Id
                             },
                             SycIdentifierDefinitionCode = s1 == null || s1.Code == null ? "" : s1.Code.ToString()
                         });

            var sycSegmentIdentifierDefinitionListDtos = await query.ToListAsync();

            return _sycSegmentIdentifierDefinitionsExcelExporter.ExportToFile(sycSegmentIdentifierDefinitionListDtos);
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_SycSegmentIdentifierDefinitions)]
        public async Task<PagedResultDto<SycSegmentIdentifierDefinitionSycIdentifierDefinitionLookupTableDto>> GetAllSycIdentifierDefinitionForLookupTable(GetAllForLookupTableInput input)
        {
            var query = _lookup_sycIdentifierDefinitionRepository.GetAll().WhereIf(
                   !string.IsNullOrWhiteSpace(input.Filter),
                  e => e.Code != null && e.Code.Contains(input.Filter)
               );

            var totalCount = await query.CountAsync();

            var sycIdentifierDefinitionList = await query
                .PageBy(input)
                .ToListAsync();

            var lookupTableDtoList = new List<SycSegmentIdentifierDefinitionSycIdentifierDefinitionLookupTableDto>();
            foreach (var sycIdentifierDefinition in sycIdentifierDefinitionList)
            {
                lookupTableDtoList.Add(new SycSegmentIdentifierDefinitionSycIdentifierDefinitionLookupTableDto
                {
                    Id = sycIdentifierDefinition.Id,
                    DisplayName = sycIdentifierDefinition.Code?.ToString()
                });
            }

            return new PagedResultDto<SycSegmentIdentifierDefinitionSycIdentifierDefinitionLookupTableDto>(
                totalCount,
                lookupTableDtoList
            );
        }

    }
}